services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    networks:
      - kafka-net
  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: localhost
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_RETENTION_HOURS: 1
    depends_on:
      - zookeeper
    networks:
      - kafka-net
  db:
    image: postgres:16
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: pass1234
      POSTGRES_DB: databaseDota
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./bdd:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin1234
    ports:
      - "5050:80"
    depends_on:
      - db
    volumes:
      - pgadmin_data:/var/lib/pgadmin

  frontend:
    build:
      context: ./frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # éviter les conflits node_modules entre hôte et conteneur
    working_dir: /app
    command: npm run dev -- --host
    environment:
      - NODE_ENV=development
    depends_on: []
#python:
#build:
#context: ./python
#container_name: python
#working_dir: /app
#volumes:
#- ./python:/app
#command: tail -f /dev/null
#networks:
#- kafka-net

networks:
  kafka-net:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
